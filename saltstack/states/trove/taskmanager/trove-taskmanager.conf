[DEFAULT]
# Show more verbose log output (sets INFO log level output)
verbose = True

# Show debugging output in logs (sets DEBUG log level output)
debug = True

# Updates service and instance task statuses if instance failed become active
update_status_on_fail = True
# how long to wait for guest agent to become active (in sec) (default is 300)
usage_sleep_time = 30
usage_timeout = {{ salt['pillar.get']('trove_guestagent_active_timeout', 900) }}


# AMQP Connection info
rabbit_password = {{ pillar['trove_rabbit_password']}}


# SQLAlchemy connection string for the reference implementation
# registry server. Any valid SQLAlchemy connection string is fine.
# See: http://www.sqlalchemy.org/docs/05/reference/sqlalchemy/connections.html#sqlalchemy.create_engine
sql_connection = {{ pillar['trove_mysql_connection']}}
# sql_connection = mysql://root:root@localhost/trove

# Period in seconds after which SQLAlchemy should reestablish its connection
# to the database.
#
# MySQL uses a default `wait_timeout` of 8 hours, after which it will drop
# idle connections. This can result in 'MySQL Gone Away' exceptions. If you
# notice this, you can lower this value to ensure that SQLAlchemy reconnects
# before MySQL can drop the connection.
sql_idle_timeout = 180

#DB Api Implementation
db_api_implementation = trove.db.sqlalchemy.api

# Configuration options for talking to nova via the novaclient.
trove_auth_url = {{ pillar['trove_auth_url']}}
nova_compute_url =  {{ pillar['trove_nova_compute_url']}}
swift_url = {{ pillar['trove_swift_url']}}


# Config options for enabling volume service
trove_volume_support = False
block_device_mapping = vdb
device_path = /dev/vdb

{% if salt['pillar.get']('mount_point') %}
mount_point = {{ pillar['mount_point']}}
{% else %}
mount_point = /var/lib/mysql
{% endif %}

volume_time_out=30
server_delete_time_out=480

# Configuration options for talking to nova via the novaclient.
# These options are for an admin user in your keystone config.
# It proxy's the token received from the user to send to nova via this admin users creds,
# basically acting like the client via that proxy token.
nova_proxy_admin_user = {{ pillar['trove_nova_admin_userid']}}
nova_proxy_admin_pass = {{ pillar['trove_nova_admin_password']}}
nova_proxy_admin_tenant_name = {{ pillar['trove_nova_admin_tenant_name']}}

# Manager impl for the taskmanager
taskmanager_manager = trove.taskmanager.manager.Manager

# trove DNS
trove_dns_support = False


# Config option for DNS to get the IP
network_label_regex = ^dbaas-.*$

# Trove Security Groups for Instances
trove_security_groups_support = True
trove_security_groups_rules_support = True
trove_security_group_rule_protocol = tcp
trove_security_group_rule_port = 3306
trove_security_group_rule_cidr = 15.0.0.0/8

# Guest related conf
agent_heartbeat_time = 10
agent_call_low_timeout = 5
agent_call_high_timeout = 150

# ================= Guestagent related ========================
#guest_config = $pybasedir/etc/trove/trove-guestagent.conf.sample
#cloudinit_location = /etc/trove/cloudinit

# Whether to use nova's contrib api for create server with volume
use_nova_server_volume = False


# ============ Logging information =============================
log_dir = /var/log/trove
log_file = trove-taskmanager.log

pydev_debug = disabled
# path to pydevd library. It will be used if pydevd is absent in sys.path
#pydev_path = <path>

# ============ Heat Configuration =============================
{% if salt['pillar.get']('heat_enabled') %}
use_heat = {{ pillar['heat_enabled'] }}
heat_url = https://{{ pillar['heat_server'] }}:8004/v1
remote_heat_client = trove_ext.mappedid.remote.mapped_heat_client
heat_time_out = {{ pillar['heat_time_out'] }}
{% endif %}
