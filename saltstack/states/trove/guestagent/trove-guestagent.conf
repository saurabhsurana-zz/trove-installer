[DEFAULT]
# Show more verbose log output (sets INFO log level output)
verbose = True

# Show debugging output in logs (sets DEBUG log level output)
debug = True

# AMQP Connection info
rabbit_password = {{ pillar['trove_rabbit_password']}}
rabbit_host = {{ pillar['trove_rabbit_host']}}
# SQLAlchemy connection string for the reference implementation
# registry server. Any valid SQLAlchemy connection string is fine.
# See: http://www.sqlalchemy.org/docs/05/reference/sqlalchemy/connections.html#sqlalchemy.create_engine
#sql_connection = sqlite:///trove_test.sqlite
#sql_connection = mysql://root:e1a2c042c828d3566d0a@10.0.0.1/trove
sql_connection =  {{ pillar['trove_mysql_connection']}}
##sql_connection = postgresql://trove:trove@localhost/trove

# Service Registry - determines the Entry Point for Guest Agent per service_type
#datastore_registry_ext=mysql:trove_ext.guestagent.manager_ext.HeartbeatsAwareGuestAgentManager, percona:trove_ext.guestagent.manager_ext.HeartbeatsAwareGuestAgentManager, vertica:trove_ext.guestagent.vertica.manager_ext.HeartbeatsAwareGuestAgentManager

# Period in seconds after which SQLAlchemy should reestablish its connection
# to the database.
#
# MySQL uses a default `wait_timeout` of 8 hours, after which it will drop
# idle connections. This can result in 'MySQL Gone Away' exceptions. If you
# notice this, you can lower this value to ensure that SQLAlchemy reconnects
# before MySQL can drop the connection.
sql_idle_timeout = 180

#DB Api Implementation
db_api_implementation = "trove.db.sqlalchemy.api"

# Path to the extensions
api_extensions_path = {{ pillar['trove_path'] }}/extensions

# Configuration options for talking to nova via the novaclient.
# These options are for an admin user in your keystone config.
# It proxies the token received from the user to send to nova via this admin users creds,
# basically acting like the client via that proxy token.

trove_auth_url = {{ pillar['trove_auth_url']}}
swift_url = {{ pillar['trove_swift_url']}}

volume_fstype = ext4
mount_options = defaults,noatime,nodiratime

# Manager impl for the taskmanager
guestagent_manager=trove.guestagent.manager.Manager

# needed so that user list returns, when root is enabled
ignore_users = os_admin

# Root configuration
#root_grant = ALL
#root_grant_option = True

{% if salt['grains.get']('trove_tenant_id', False) and salt['pillar.get']('elevated_root_tenants', False) and grains['trove_tenant_id'] in pillar['elevated_root_tenants'] %}
root_grant = PROCESS, ALTER ROUTINE, CREATE, ALTER, CREATE ROUTINE, CREATE TEMPORARY TABLES, CREATE VIEW, DELETE, DROP, EVENT, EXECUTE, INDEX, INSERT, LOCK TABLES, REFERENCES, SELECT,
 SHOW VIEW, TRIGGER, UPDATE, USAGE, REPLICATION SLAVE, REPLICATION CLIENT, RELOAD, SUPER
root_grant_option = True
{% else %}
root_grant = PROCESS, ALTER ROUTINE, CREATE, ALTER, CREATE ROUTINE, CREATE TEMPORARY TABLES, CREATE VIEW, DELETE, DROP, EVENT, EXECUTE, INDEX, INSERT, LOCK TABLES, REFERENCES, SELECT,
 SHOW VIEW, TRIGGER, UPDATE, USAGE
root_grant_option = False
{% endif  %}

# ============ Logging information =============================
log_dir = /var/log/trove/
log_file = trove-guestagent.log

# Strategy information for backups
backup_strategy = InnoBackupEx
backup_namespace = trove.guestagent.strategies.backup.mysql_impl
backup_runner_options = InnoBackupEx:--no-lock,  MySQLDump:
restore_namespace = trove.guestagent.strategies.restore.mysql_impl
storage_strategy = SwiftStorage
storage_namespace = trove.guestagent.strategies.storage.swift
backup_swift_container = {{ pillar['trove_backup_swift_container'] }}
backup_use_gzip_compression = True
backup_use_snet = False
backup_chunk_size = 65536
backup_segment_max_size = 2147483648

# used by passlib to generate root password
default_password_length = 36

{% if salt['pillar.get']('mount_point', False) %}
mount_point = {{ pillar['mount_point']}}
{% else %}
mount_point = /var/lib/mysql
{% endif %}

{% if salt['pillar.get']('service_type', False) %}
service_type = {{ pillar['service_type']}}
{% endif %}
